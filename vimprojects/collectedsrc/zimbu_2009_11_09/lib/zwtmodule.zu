#
# The Zimbu compiler written in Zimbu
#
# builtin module ZWT: Zimbu Web Toolkit
#
# Copyright 2009 Bram Moolenaar
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#
# Credits: The Class hierarchy, generated Javascript and a few other things
# are based on the Google Web Toolkit.
# http://code.google.com/webtoolkit/overview.html
#
# Beware of browser incompabilities!
# compatibility tables: http://www.quirksmode.org/
#
# Javascript tutorial:
# https://docs.google.com/a/google.com/Doc?docid=0AR71dZfgJD1pZGc2dDJmajVfMWY4djd0emd0&hl=en
#

MODULE ZWTmodule

  #
  # The tree of classes is only used when generating Javascript.
  #
  GENERATE_IF lang == "JS"
    GENERATE_IF FALSE
      # Lowest level object, a Javascript element.
      # Only used as a reference, don't need to produce JS for it.
      CLASS Element
      }
    }

    # Lowest level ZWT object.  Wraps a DOM element.  Cannot handle events.
    CLASS.abstract UIObject
      Element elem     # The Javascript element for this Item.
    }

    # An entry in a MenuBar.  Each item has a uniqe ID.
    CLASS MenuItem EXTENDS UIObject  # IMPLEMENTS HasHTML, HasText
    }

    # A separator in a MenuBar.
    CLASS MenuItemSeparator EXTENDS UIObject
    }

    # An item that can be contained in a Tree.  Each item has a uniqe ID.
    CLASS TreeItem EXTENDS UIObject  # IMPLEMENTS HasHTML, HasText
    }

    # A UIObject that handles events and can be added to panels.
    # Needs to be extended to be useful.
    CLASS Widget EXTENDS UIObject  # IMPLEMENTS EventListener, HasHandlers
      Widget.I parent

      FUNC Widget.I getParent()
        RETURN parent
      }

      PROC.default removeFromParent()
        IF parent != NIL
>>>
          this.Vparent.Velem.removeChild(this.Velem);
<<<
          parent = NIL
        }
      }
    }

    # A panel is a Widget that contains other widgets.
    # How they are ordered is defined by children.
    CLASS.abstract Panel EXTENDS Widget
      list<Widget.I> items

      PROC.default add(Widget.I w)
        IF items == NIL
          items = NEW()
        }
        items.add(w)
        w.parent = THIS
>>>
        this.Velem.appendChild(Aw.Velem);
<<<
      }

      PROC.default remove(Widget.I w)
        int i
        WHILE i < items.SIZE()
          IF items[i] IS w
            items.pop(i)
            w.removeFromParent()
            w.parent = NIL
            RETURN
          }
          ++i
        }
      }

      PROC clear()
        WHILE items.SIZE() > 0
          remove(items[0])
        }
      }
    }

    # A panel that contains multiple children.
    CLASS ComplexPanel EXTENDS Panel
    }

    # A panel that has its children in the cells of a table.
    CLASS CellPanel EXTENDS ComplexPanel
      Element body

      PROC.default init()
        # Create an empty table, assign the body element to "body".
>>>
        this.Velem = $doc.createElement('table');
        this.Vbody = $doc.createElement('tbody');
        this.Velem.appendChild(this.Vbody);
<<<
      }

    }

    # A panel that places its children with an absolute position.
    # The root panel is an AbsolutePanel.
    CLASS AbsolutePanel EXTENDS ComplexPanel
    }

    CLASS VerticalPanel EXTENDS CellPanel

      REPLACE PROC add(Widget.I w)
        IF elem == NIL
          THIS.init()
        }
        PARENT.add(w)
>>>
        var tr = $doc.createElement('tr');
        var td = $doc.createElement('td');
        td.appendChild(Aw.Velem);
        tr.appendChild(td);
        this.Vbody.appendChild(tr);
<<<
      }

      REPLACE PROC remove(Widget.I w)
        int i
        WHILE i < items.SIZE()
          IF items[i] IS w
            items.pop(i)
            IF w.parent IS THIS
              # The element is in <tr><td>elem</td></tr>
>>>
              this.Vbody.removeChild(Aw.Velem.parentNode.parentNode);
<<<
              w.parent = NIL
            }
            RETURN
          }
          ++i
        }
      }
    }

    CLASS HorizontalPanel EXTENDS CellPanel
      Element row

      REPLACE PROC init()
        PARENT.init()
>>>
        this.Vrow = $doc.createElement('tr');
        this.Vbody.appendChild(this.Vrow)
<<<
      }

      REPLACE PROC add(Widget.I w)
        IF elem == NIL
          init()
        }
        PARENT.add(w)
>>>
        var td = $doc.createElement('td');
        td.appendChild(Aw.Velem);
        this.Vrow.appendChild(td);
<<<
      }

      REPLACE PROC remove(Widget.I w)
        int i
        WHILE i < items.SIZE()
          IF items[i] IS w
            items.pop(i)
            IF w.parent IS THIS
              # The element is in <td>elem</td>
>>>
              this.Vrow.removeChild(Aw.Velem.parentNode);
<<<
              w.parent = NIL
            }
            RETURN
          }
          ++i
        }
      }
    }

    CLASS DockPanel EXTENDS CellPanel
    }

    # A standard menu bar widget.
    CLASS MenuBar EXTENDS Widget
    }

    CLASS Label EXTENDS Widget
      string labelText

      NEW(string text)
        labelText = text
>>>
        thisO.Velem = $doc.createElement('div');
<<<
        GENERATE_IF permu == "gecko" || permu == "gecko18"
>>>
          thisO.Velem.textContent = Atext;
<<<
        GENERATE_ELSE
>>>
          thisO.Velem.innerText = Atext;
<<<
        }
      }
    }

    CLASS Button EXTENDS Widget
      string buttonText
      proc<Widget.I> onClickProc

      NEW(string text, proc<Widget.I> onClick)
        buttonText = text
        onClickProc = onClick
>>>
    thisO.Velem = $doc.createElement('button');
    thisO.Velem.innerHTML = Atext;
    thisO.Velem.onclick = AonClick;
<<<
      }
    }

    AbsolutePanel rootPanel

    FUNC AbsolutePanel root()
      IF rootPanel == NIL
        rootPanel = NEW()
        Element v
>>>
        Vv = $doc.body;
<<<
        rootPanel.elem = v
      }
      RETURN rootPanel
    }

    PROC alert(string msg)
>>>
      alert(Amsg);
<<<
    }

    PROC close()
      EXIT 0
    }
  }

  #
  # The HTML page that selects the Javascript file to load.
  # This is only used by the server, not by the Javascript files.
  #
  GENERATE_IF lang == "C"
    PROC createPage(HTTP.Server server, string pageName, INFO.ModuleInfo info)
      string leader = '''<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>'''
      string middle = '''</title>
  <script type="text/javascript">
    var $wnd = parent;
    var $doc = $wnd.document;
  </script>
</head>
<body>
  <iframe src="javascript:''" id="__zwt_historyFrame" tabIndex='-1' style="position:absolute;width:0;height:0;border:0"></iframe>
  <script type="text/javascript">
  function jsType() {
    var agent = navigator.userAgent.toLowerCase();
    var makeVersion = function(vers) {
      return parseInt(vers[1]) * 1000 + parseInt(vers[2]);
    };
    if (agent.indexOf('opera') != -1) { return 'opera'; }
    else if (agent.indexOf('webkit') != -1) { return 'safari'; }
    else if (agent.indexOf('msie') != -1) {
      if (document.documentMode >= 8) { return 'ie8'; }
      else {
        var ievers = /msie ([0-9]+)\.([0-9]+)/.exec(agent);
        if (ievers && ievers.length == 3) {
          var v = makeVersion(ievers);
          if (v >= 6000) { return 'ie6'; }
        }
      }
    }
    else if (agent.indexOf('gecko') != -1) {
      var geckovers = /rv:([0-9]+)\.([0-9]+)/.exec(agent);
      if (geckovers && geckovers.length == 3) {
        if (makeVersion(geckovers) >= 1008)
          return 'gecko18';
      }
      return 'gecko';
    }
    return 'unknown';
  };
  function getPageName() {
    var fnames = {'''
      string footer = '''};
    var name = jsType();
    return fnames[name];
  };
  function loadIframe(fname) {
    var iframe = $doc.createElement('iframe');
    iframe.src = "javascript:''";
    iframe.id = 'demoapp';
    iframe.style.cssText = 'position:absolute;width:0;height:0;border:none';
    iframe.tabIndex = -1;
    $doc.body.appendChild(iframe);
    iframe.contentWindow.location.replace(fname);
  };
  var pname = getPageName();
  if (pname && pname != 'unknown') {
    loadIframe(pname);
  } else {
    var e = $doc.createElement('div');
    e.innerHTML = "Sorry, your browser is not supported.";
    $doc.body.appendChild(e);
  }
  </script>
</body>
</html>
'''

      # Serve the HTML file that is the entry point.
      string html = leader .. info.name .. middle

      # There is one file to load for each browser type.
      # Generate the dictionary with the file names here.
      FOR key IN info.permutations.keys()
        string jsName = info.permutations.get(key)
        html ..= "'" .. key .. "': '/" .. jsName .. "', "

        # Serve the file that is loaded by the HTML page.
        # TODO: path should be configurable.
        string path = ""
        HTTP.FileServlet fs = NEW(path .. jsName)
        fs.addPath("/" .. jsName)
        server.addServlet(fs)
      }

      # Add an entry for an unknown browser.
      html ..= "'unknown': 'unknown'"

      html ..= footer

      HTTP.StringServlet ss = NEW(html)
      ss.addPath("/" .. pageName)
      # TODO: set caching to 5 minutes.
      # ss.setCacheTime(5 * 60)
      server.addServlet(ss)

    }

  } # GENERATE_IF
}
