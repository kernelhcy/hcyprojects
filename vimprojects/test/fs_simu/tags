!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
A	fs_base.h	22;"	d
BITSET_BITS	bitset.c	11;"	d	file:
BITSET_MASK	bitset.c	18;"	d	file:
BITSET_USED	bitset.c	32;"	d	file:
BITSET_WORD	bitset.c	24;"	d	file:
BLOCK_SIZE	node.h	8;"	d
BNODE_MAXNUM	node.h	13;"	d
B_ADDR_NUM	node.h	9;"	d
CC	Makefile	/^CC=gcc$/;"	m
DIR_INCLUDE_MAXNUM	fs_base.h	31;"	d
DIR_MAXNUM	fs_base.h	30;"	d
DIR_NAME_MAXSIZE	fs_base.h	28;"	d
DIR_T	fs_base.h	17;"	d
D_ADDR_NUM	node.h	10;"	d
ERROR_VAL	bitset.h	6;"	d
FILE_NAME_MAXSIZE	fs_base.h	29;"	d
FILE_P	fs_base.h	/^typedef struct inode FILE_P;$/;"	t	typeref:struct:inode
FILE_T	fs_base.h	16;"	d
INODE_MAXNUM	node.h	12;"	d
MAXLINE	log.c	4;"	d	file:
MAX_LOGIN_USR	user.h	14;"	d
NONE_T	fs_base.h	18;"	d
OBJS	Makefile	/^OBJS= main.o fs.o log.o bitset.o$/;"	m
PWD_MAXSIZE	user.h	11;"	d
R	fs_base.h	20;"	d
R_R	fs_base.h	24;"	d
USR_NAME_MAXSIZE	user.h	10;"	d
USR_OFILE_MAXNUM	user.h	12;"	d
W	fs_base.h	21;"	d
W_R	fs_base.h	25;"	d
X_R	fs_base.h	26;"	d
_FS_BASE_H	fs_base.h	2;"	d
_LOG_ERROR	log.c	/^	_LOG_ERROR, 	\/\/错误信息$/;"	e	enum:__anon2	file:
_LOG_INFO	log.c	/^	_LOG_INFO, 		\/\/一般信息$/;"	e	enum:__anon2	file:
_LOG_UNKNOWN	log.c	/^	_LOG_UNKNOWN 	\/\/未知信息$/;"	e	enum:__anon2	file:
_LOG_WARNING	log.c	/^	_LOG_WARNING, 	\/\/警告信息$/;"	e	enum:__anon2	file:
__HFS_BITSET_H	bitset.h	2;"	d
__HFS_DIR_H	dir.h	2;"	d
__HFS_FS_H	fs.h	2;"	d
__HFS_LOG_H	log.h	2;"	d
__HFS_NODE_H	node.h	2;"	d
__HFS_USER_H	user.h	2;"	d
_hfs	fs_base.h	/^typedef struct _hfs$/;"	s
access_f	user.c	/^static int access_f(const char* name, int mode)$/;"	f	file:
addr	node.h	/^	unsigned int addr;						\/*一级块索引*\/$/;"	m	struct:dinode
addr	node.h	/^	unsigned int addr;						\/*一级块索引*\/$/;"	m	struct:inode
array_len	bitset.h	/^	size_t array_len;$/;"	m	struct:__anon1
b_addr	node.h	/^	unsigned int b_addr[B_ADDR_NUM]; $/;"	m	union:block
balloc	node.c	/^int balloc()$/;"	f
bfree	node.c	/^void bfree(int id)$/;"	f
bits	bitset.h	/^	unsigned long long int * bits;$/;"	m	struct:__anon1
bitset	bitset.h	/^} bitset;$/;"	t	typeref:struct:__anon1
bitset_clear_bit	bitset.c	/^void bitset_clear_bit(bitset * set, size_t pos)$/;"	f
bitset_free	bitset.c	/^void bitset_free(bitset * set)$/;"	f
bitset_get_first_unused_bit_pos	bitset.c	/^size_t bitset_get_first_unused_bit_pos(bitset *set)$/;"	f
bitset_init	bitset.c	/^bitset *bitset_init(size_t nbits)$/;"	f
bitset_print	bitset.c	/^void bitset_print(bitset* set)$/;"	f
bitset_read_fd	bitset.c	/^int bitset_read_fd(bitset* set, FILE* fd)$/;"	f
bitset_reset	bitset.c	/^void bitset_reset(bitset * set)$/;"	f
bitset_set_bit	bitset.c	/^void bitset_set_bit(bitset * set, size_t pos)$/;"	f
bitset_test_bit	bitset.c	/^int bitset_test_bit(bitset * set, size_t pos)$/;"	f
bitset_write_fd	bitset.c	/^int bitset_write_fd(bitset* set, FILE* fd)$/;"	f
block	node.h	/^union block$/;"	u
blocks	fs_base.h	/^	union block *blocks;								\/\/模拟物理块$/;"	m	struct:_hfs	typeref:union:_hfs::block
bmap	fs_base.h	/^	bitset *bmap;						\/\/物理块位图$/;"	m	struct:_hfs
calloc_memory	fs.c	/^int calloc_memory()$/;"	f
cpy_name_update	fs.c	/^static int cpy_name_update(int id)$/;"	f	file:
create_user	user.c	/^int create_user(const char *username, const char *passwd)$/;"	f
curr_dir_id	fs_base.h	/^	unsigned int curr_dir_id = 0;						\/\/当前工作目录的id号$/;"	m	struct:_hfs
curr_path	fs_base.h	/^	char curr_path[500];								\/\/当前工作目录$/;"	m	struct:_hfs
curr_pos	node.h	/^	unsigned long curr_pos;				\/*文件读取的当前位置。*\/$/;"	m	struct:inode
curr_user	fs_base.h	/^	struct user *curr_user;								\/\/当前登录用户$/;"	m	struct:_hfs	typeref:struct:_hfs::user
curr_usr_id	fs_base.h	/^	int curr_usr_id;									\/\/当前登录用户在用户列表中的位置。$/;"	m	struct:_hfs
d_id	dir.h	/^ 	unsigned int d_id;							\/*目录的id号。即目录数组中的索引号*\/$/;"	m	struct:directory
d_name	dir.h	/^ 	char d_name[DIR_NAME_MAXSIZE];         		\/*目录名*\/$/;"	m	struct:directory
di_gid	node.h	/^	unsigned short di_gid;    			\/*磁盘i节点组*\/$/;"	m	struct:inode
di_gid	node.h	/^ 	unsigned int di_gid;$/;"	m	struct:dinode
di_number	node.h	/^	unsigned short di_number; 			\/*关联文件数，当为0时，则删除该文件*\/$/;"	m	struct:inode
di_number	node.h	/^ 	unsigned short di_number;        	\/*关联文件数*\/$/;"	m	struct:dinode
di_right	node.h	/^	unsigned int di_right;   			\/*存取权限*\/$/;"	m	struct:inode
di_right	node.h	/^ 	unsigned int di_right;          	\/*存取权限*\/$/;"	m	struct:dinode
di_size	node.h	/^	unsigned long di_size;            	\/*文件大小*\/$/;"	m	struct:dinode
di_size	node.h	/^	unsigned long di_size;            	\/*文件大小*\/$/;"	m	struct:inode
di_uid	node.h	/^	unsigned short di_uid;    			\/*磁盘i节点用户*\/$/;"	m	struct:inode
di_uid	node.h	/^ 	unsigned int di_uid;				\/*所有者的id*\/$/;"	m	struct:dinode
dinode	node.h	/^struct dinode$/;"	s
dinodes	fs_base.h	/^	struct dinode *dinodes;								\/\/模拟硬盘i节点$/;"	m	struct:_hfs	typeref:struct:_hfs::dinode
dir_info	dir.h	/^struct dir_info$/;"	s
dir_info	fs_base.h	/^	struct dir_info *dir_info;		\/\/目录信息$/;"	m	struct:_hfs	typeref:struct:_hfs::dir_info
dir_or_file	node.h	/^	int dir_or_file;					\/*标记是文件还是目录*\/$/;"	m	struct:dinode
dir_or_file	node.h	/^	int dir_or_file;					\/*标记是文件还是目录*\/$/;"	m	struct:inode
dir_table	fs_base.h	/^	struct directory *dir_table;						\/\/模拟目录表$/;"	m	struct:_hfs	typeref:struct:_hfs::directory
diralloc	dir.c	/^int diralloc()$/;"	f
direct_addr	node.h	/^	unsigned int direct_addr[D_ADDR_NUM];  	$/;"	m	struct:dinode
direct_addr	node.h	/^	unsigned int direct_addr[D_ADDR_NUM];  	$/;"	m	struct:inode
directory	dir.h	/^struct directory$/;"	s
dirfree	dir.c	/^int dirfree(int id)$/;"	f
disk_size	fs_base.h	/^ 	long disk_size;						\/*磁盘空间大小。用文件大小模拟。*\/$/;"	m	struct:supernode
dmap	dir.h	/^	bitset *dmap; 								\/\/位图$/;"	m	struct:dir_info
do_log	log.c	/^void do_log(const char *fmt, log_t t, va_list ap)$/;"	f
entry	node.h	/^	char entry[BLOCK_SIZE];$/;"	m	union:block
f_count	fs_base.h	/^	unsigned int f_count; 	\/*引用计数*\/$/;"	m	struct:system_ofile
f_flag	fs_base.h	/^	char f_flag; 			\/*文件操作标志*\/$/;"	m	struct:system_ofile
f_inode	fs_base.h	/^	struct inode *f_inode; 	\/*指向内存节点*\/$/;"	m	struct:system_ofile	typeref:struct:system_ofile::inode
f_off	fs_base.h	/^	unsigned long f_off; 	\/*读\/写指针*\/$/;"	m	struct:system_ofile
file_inode	dir.h	/^	unsigned int file_inode[DIR_INCLUDE_MAXNUM];           	\/*对应的inode号*\/$/;"	m	struct:directory
file_name	dir.h	/^	char file_name[DIR_INCLUDE_MAXNUM][FILE_NAME_MAXSIZE];        \/*目录中的文件或子目录的名子*\/$/;"	m	struct:directory
find_usr	user.c	/^int find_usr(const char *username, struct user *usr)$/;"	f
format_fs	fs.c	/^static int format_fs()$/;"	f	file:
hfs	fs_base.h	/^}hfs;$/;"	t	typeref:struct:_hfs
hfs_cat	fs.c	/^char* hfs_cat(FILE_P *fp)$/;"	f
hfs_chdir	fs.c	/^int hfs_chdir(const char *path)$/;"	f
hfs_close	fs.c	/^int hfs_close(FILE_P *fp)$/;"	f
hfs_create	fs.c	/^FILE_P* hfs_create(const char *name, int right)$/;"	f
hfs_delete	fs.c	/^int hfs_delete(const char *name)$/;"	f
hfs_halt	fs.c	/^int hfs_halt()$/;"	f
hfs_init	fs.c	/^int hfs_init()$/;"	f
hfs_login	fs.c	/^int hfs_login(const char *username, const char *passwd)$/;"	f
hfs_logout	fs.c	/^int hfs_logout(const char *user_name)$/;"	f
hfs_ls	fs.c	/^char * hfs_ls(const char *path)$/;"	f
hfs_mkdir	fs.c	/^int hfs_mkdir(const char *name)$/;"	f
hfs_open	fs.c	/^FILE_P* hfs_open(const char *name, int mode)$/;"	f
hfs_pwd	fs.c	/^char* hfs_pwd()$/;"	f
hfs_read	fs.c	/^int hfs_read(FILE_P *fp, char *buffer, int length)$/;"	f
hfs_rmdir	fs.c	/^int hfs_rmdir(const char *name)$/;"	f
hfs_write	fs.c	/^int hfs_write(FILE_P *fp, char *buffer, int length)$/;"	f
hfs_write_to_file	fs.c	/^static int hfs_write_to_file()$/;"	f	file:
i_back	node.h	/^	struct inode  *i_back;$/;"	m	struct:inode	typeref:struct:inode::inode
i_count	node.h	/^	unsigned int i_count;     			\/*用户引用计数*\/$/;"	m	struct:inode
i_forw	node.h	/^	struct inode  *i_forw;$/;"	m	struct:inode	typeref:struct:inode::inode
i_into	node.h	/^	unsigned int i_into;      			\/*磁盘i节点标号*\/$/;"	m	struct:inode
ialloc	node.c	/^int ialloc()$/;"	f
ifree	node.c	/^void ifree(int id)$/;"	f
imap	fs_base.h	/^	bitset *imap;						\/\/inode位图$/;"	m	struct:_hfs
index	dir.h	/^	int index;                                  \/\/目录表中可用的位置。$/;"	m	struct:dir_info
inode	node.h	/^struct inode$/;"	s
inode_id	dir.h	/^ 	unsigned int inode_id;						\/*inode号*\/$/;"	m	struct:directory
inodes	fs_base.h	/^	struct inode *inodes;								\/\/内存i节点$/;"	m	struct:_hfs	typeref:struct:_hfs::inode
log_error	log.c	/^void log_error(const char *fmt, ...)$/;"	f
log_info	log.c	/^void log_info(const char *fmt, ...)$/;"	f
log_t	log.c	/^}log_t;$/;"	t	typeref:enum:__anon2	file:
log_warning	log.c	/^void log_warning(const char *fmt, ...)$/;"	f
login_users	fs_base.h	/^	struct user login_users[MAX_LOGIN_USR];				\/\/登录的用户列表$/;"	m	struct:_hfs	typeref:struct:_hfs::user
main	main.c	/^int main(int argc, char** argv)$/;"	f
mode	node.h	/^	unsigned int mode;					\/*打开方式*\/$/;"	m	struct:inode
nbits	bitset.h	/^	size_t nbits;$/;"	m	struct:__anon1
p_gid	user.h	/^	unsigned short p_gid;$/;"	m	struct:user
p_uid	user.h	/^ 	unsigned short p_uid;$/;"	m	struct:user
parent_id	dir.h	/^ 	unsigned int parent_id;						\/*父目录的id。*\/$/;"	m	struct:directory
parent_id	node.h	/^	unsigned int parent_id;             \/*父目录的目录号。*\/$/;"	m	struct:dinode
parent_id	node.h	/^	unsigned int parent_id;             \/*父目录的目录号。*\/$/;"	m	struct:inode
passwd	user.h	/^	char passwd[PWD_MAXSIZE];$/;"	m	struct:user
read_fs	fs.c	/^static int read_fs()$/;"	f	file:
read_indirect_block	fs.c	/^static int read_indirect_block(union block *addr_block, int len, char* buffer)$/;"	f	file:
root_id	dir.h	/^ 	unsigned int root_id;						\/\/根目录的id。通常是0.$/;"	m	struct:dir_info
run	fs.c	/^void run(int show_details)$/;"	f
s_bsize	fs_base.h	/^ 	unsigned long s_bsize;             	\/*数据块块数*\/$/;"	m	struct:supernode
s_fmod	fs_base.h	/^ 	char s_fmod;                    	\/*超级块修改标志*\/$/;"	m	struct:supernode
s_free	fs_base.h	/^ 	unsigned int s_free[NICFREE];     	\/*空闲块堆栈*\/$/;"	m	struct:supernode
s_inode	fs_base.h	/^ 	unsigned int s_inode[NICINOD];   	\/*空闲i节点数组*\/$/;"	m	struct:supernode
s_isize	fs_base.h	/^ 	unsigned int s_isize;            	\/*i节点块块数*\/$/;"	m	struct:supernode
s_nfree	fs_base.h	/^ 	unsigned int s_nfree;             	\/*空闲块块数*\/$/;"	m	struct:supernode
s_ninode	fs_base.h	/^ 	unsigned int s_ninode;            	\/*空闲i节点数*\/$/;"	m	struct:supernode
s_pfree	fs_base.h	/^ 	unsigned short s_pfree;           	\/*空闲块指针*\/$/;"	m	struct:supernode
s_pinode	fs_base.h	/^ 	unsigned short s_pinode;          	\/*空闲i节点指针*\/$/;"	m	struct:supernode
s_rinode	fs_base.h	/^	unsigned int s_rinode;           	\/*铭记i节点*\/$/;"	m	struct:supernode
sen_addr	node.h	/^	unsigned int sen_addr;					\/*二级块索引*\/$/;"	m	struct:dinode
sen_addr	node.h	/^	unsigned int sen_addr;					\/*二级块索引*\/$/;"	m	struct:inode
show_help_info	fs.c	/^void show_help_info()$/;"	f
show_names	fs.c	/^static int show_names(int id,int black)$/;"	f	file:
size	dir.h	/^ 	unsigned int size;                  		\/\/目录的个数$/;"	m	struct:dir_info
sn	fs_base.h	/^	struct supernode *sn;				\/\/超级块$/;"	m	struct:_hfs	typeref:struct:_hfs::supernode
str_cpy	fs.c	/^static void str_cpy(char * des, const char * src, int begin, int size)$/;"	f	file:
sub_cnt	dir.h	/^ 	unsigned int sub_cnt;									\/*子目录和文件的数目*\/$/;"	m	struct:directory
sub_dir_ids	dir.h	/^	unsigned int sub_dir_ids[DIR_INCLUDE_MAXNUM];				\/*若对应项是目录，存放其id。*\/$/;"	m	struct:directory
supernode	fs_base.h	/^struct supernode$/;"	s
system_ofile	fs_base.h	/^struct system_ofile$/;"	s
system_ofile_table	fs_base.h	/^	struct system_ofile system_ofile_table;				\/\/系统打开的文件列表$/;"	m	struct:_hfs	typeref:struct:_hfs::system_ofile
t_fp	fs.c	/^static FILE_P *t_fp = NULL;\/\/调试使用$/;"	v	file:
tip	fs_base.h	/^	char tip[50];										\/\/命令提示$/;"	m	struct:_hfs
tru_addr	node.h	/^	unsigned int tru_addr;					\/*三级块索引*\/$/;"	m	struct:dinode
tru_addr	node.h	/^	unsigned int tru_addr;					\/*三级块索引*\/$/;"	m	struct:inode
u_default_mode	user.h	/^	unsigned short u_default_mode;$/;"	m	struct:user_ofile
u_gid	user.h	/^	unsigned short u_gid; 			\/*用户组标志*\/$/;"	m	struct:user_ofile
u_ofile	user.h	/^	unsigned short u_ofile[USR_OFILE_MAXNUM]; \/*用户打开表*\/$/;"	m	struct:user_ofile
u_uid	user.h	/^	unsigned short u_uid; 			\/*用户标志*\/$/;"	m	struct:user_ofile
update_curr_path_name	fs.c	/^static int update_curr_path_name()$/;"	f	file:
user	user.h	/^struct user$/;"	s
user_ofile	user.h	/^struct user_ofile$/;"	s
user_ofile_table	fs_base.h	/^	struct user_ofile user_ofile_table[MAX_LOGIN_USR]; 	\/\/用户打开文件列表$/;"	m	struct:_hfs	typeref:struct:_hfs::user_ofile
username	user.h	/^	char username[USR_NAME_MAXSIZE];$/;"	m	struct:user
usr_num	fs_base.h	/^	int usr_num = 0;									\/\/登陆的用户个数$/;"	m	struct:_hfs
write_block	fs.c	/^static int write_block(int b_id, char *buffer, int size)$/;"	f	file:
