!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
A	os/fs_structs.h	17;"	d
AP	os/OS3_memory.cpp	/^const int AP = 5;$/;"	v
AR	qttest/Makefile	/^AR            = ar cqs$/;"	m
BLOCK_SIZE	os/fs_structs.h	23;"	d
BMAP_SIZE	os/fs_structs.h	44;"	d
BNODE_SIZE	os/fs_structs.h	38;"	d
BUFFERSIZE	os/OS2_process.cpp	/^const int BUFFERSIZE = 100;\/\/缓冲区大小$/;"	v
B_ADDR_NUM	os/fs_structs.h	24;"	d
CC	qttest/Makefile	/^CC            = gcc$/;"	m
CFLAGS	qttest/Makefile	/^CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
CHK_DIR_EXISTS	qttest/Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
CLEAR_PERIOD	os/OS3_memory.cpp	/^const int CLEAR_PERIOD = 5;$/;"	v
COMPRESS	qttest/Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	qttest/Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	qttest/Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	qttest/Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	qttest/Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	qttest/Makefile	/^CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
DEFINES	qttest/Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	qttest/Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	qttest/Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	qttest/Makefile	/^DESTDIR       = $/;"	m
DIR_INCLUDE_NUM	os/fs_structs.h	31;"	d
DIR_NAME_SIZE	os/fs_structs.h	27;"	d
DIR_NUM	os/fs_structs.h	29;"	d
DIR_T	os/fs_structs.h	14;"	d
DIST	qttest/Makefile	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/g++.conf \\$/;"	m
DMAP_SIZE	os/fs_structs.h	30;"	d
D_ADDR_NUM	os/fs_structs.h	25;"	d
FIFO	os/OS3_memory.cpp	/^void FIFO(bool show_details)$/;"	f
FIFO_show_queue	os/OS3_memory.cpp	/^void FIFO_show_queue(int *queue, int queue_len, int now_page, int head, bool page_fault)$/;"	f
FILE_NAME_SIZE	os/fs_structs.h	28;"	d
FILE_P	os/fs_structs.h	/^}FILE_P;$/;"	t	typeref:struct:inode
FILE_T	os/fs_structs.h	13;"	d
FINDDIALOG_H	qttest/finddialog.h	2;"	d
FileAction	compiler/headers/FileActions.h	/^class FileAction$/;"	c
FileAction	compiler/imp/FileAction_imp.cpp	/^FileAction::FileAction(const std::string& f_in_path, const std::string& f_out_path$/;"	f	class:FileAction
FileAction	compiler/imp/FileAction_imp.cpp	/^FileAction::FileAction(std::ifstream& ifs_p, std::ofstream& ofs_p) : ifs(ifs_p), ofs(ofs_p)$/;"	f	class:FileAction
FindDialog	qttest/finddialog.cpp	/^FindDialog::FindDialog(QWidget * parent)$/;"	f	class:FindDialog
FindDialog	qttest/finddialog.h	/^class FindDialog : public QDialog$/;"	c
Frame	os/OS3_memory.cpp	/^struct Frame$/;"	s	file:
IMAP_SIZE	os/fs_structs.h	43;"	d
INCPATH	qttest/Makefile	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++ -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4 -I. -I. -I.$/;"	m
INFINITE	os/OS3_memory.cpp	/^const int INFINITE = 65535;$/;"	v
INODE_SIZE	os/fs_structs.h	37;"	d
INPUT	os/OS2_process.cpp	/^const int INPUT = 0;\/\/管道读标志$/;"	v
INSTALL_DIR	qttest/Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	qttest/Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	qttest/Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
LFLAGS	qttest/Makefile	/^LFLAGS        = -Wl,-O1$/;"	m
LIBS	qttest/Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib -lQtGui -lQtCore -lpthread$/;"	m
LINK	qttest/Makefile	/^LINK          = g++$/;"	m
LRU	os/OS3_memory.cpp	/^void LRU(bool show_details)$/;"	f
LRU_show_memory	os/OS3_memory.cpp	/^void LRU_show_memory(int now_page, bool page_fault)$/;"	f
LexicalAnalysis	compiler/headers/LexicalAnalysis.h	/^class LexicalAnalysis$/;"	c
LexicalAnalysis	compiler/imp/LexicalAnalysis_imp.cpp	/^LexicalAnalysis::LexicalAnalysis(FileAction& fa_p)$/;"	f	class:LexicalAnalysis
MAXLINE	apue/ourhdr.h	14;"	d
MAX_LOGIN_USR	os/fs_structs.h	46;"	d
MKDIR	qttest/Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	qttest/Makefile	/^MOVE          = mv -f$/;"	m
NICFREE	os/fs_structs.h	40;"	d
NICINOD	os/fs_structs.h	41;"	d
NUR	os/OS3_memory.cpp	/^void NUR(bool show_details)$/;"	f
NUR_print_info	os/OS3_memory.cpp	/^void NUR_print_info(int now_page, bool page_fault)$/;"	f
OBJECTS	qttest/Makefile	/^OBJECTS       = main.o$/;"	m
OBJECTS_DIR	qttest/Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OPT	os/OS3_memory.cpp	/^void OPT(bool show_details)$/;"	f
OPT_show_info	os/OS3_memory.cpp	/^void OPT_show_info(int now_page, bool page_fault)$/;"	f
OUTPUT	os/OS2_process.cpp	/^const int OUTPUT = 1;\/\/管道写标志$/;"	v
PP	os/OS3_memory.cpp	/^const int PP = 10;$/;"	v
PWD_SIZE	os/fs_structs.h	34;"	d
Page	os/OS3_memory.cpp	/^struct Page$/;"	s	file:
QMAKE	qttest/Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE_TARGET	qttest/Makefile	/^QMAKE_TARGET  = qttest$/;"	m
R	os/fs_structs.h	15;"	d
RANLIB	qttest/Makefile	/^RANLIB        = $/;"	m
R_R	os/fs_structs.h	19;"	d
SED	qttest/Makefile	/^SED           = sed$/;"	m
SIZE	compiler/headers/SyntaxAnalysis.h	/^    const static int SIZE = 26;$/;"	m	class:SyntaxAnalysis
SOURCES	qttest/Makefile	/^SOURCES       = main.cpp $/;"	m
SYMLINK	qttest/Makefile	/^SYMLINK       = ln -sf$/;"	m
SyntaxAnalysis	compiler/headers/SyntaxAnalysis.h	/^class SyntaxAnalysis$/;"	c
SyntaxAnalysis	compiler/imp/SyntaxAnalysis_Imp.cpp	/^SyntaxAnalysis::SyntaxAnalysis(LexicalAnalysis & _la)$/;"	f	class:SyntaxAnalysis
TAR	qttest/Makefile	/^TAR           = tar -cf$/;"	m
TARGET	qttest/Makefile	/^TARGET        = qttest$/;"	m
USR_NAME_SIZE	os/fs_structs.h	33;"	d
USR_OFILE_NUM	os/fs_structs.h	35;"	d
W	os/fs_structs.h	16;"	d
W_R	os/fs_structs.h	20;"	d
X_R	os/fs_structs.h	21;"	d
_FILEACTIONS_H	compiler/headers/FileActions.h	8;"	d
_FS_H	os/fs.h	2;"	d
_FS_STRUCTS_H	os/fs_structs.h	2;"	d
_HEADERS_H	os/headers.h	8;"	d
_LEXICALANALYSIS_H	compiler/headers/LexicalAnalysis.h	8;"	d
_SYNTAXANALYSIS_H	compiler/headers/SyntaxAnalysis.h	8;"	d
__ourhdr_h	apue/ourhdr.h	6;"	d
access_f	os/OS4_fs.cpp	/^static int access_f(const char* name, int mode)$/;"	f	file:
addr	os/fs_structs.h	/^	unsigned int addr;						\/*一级块索引*\/$/;"	m	struct:dinode
addr	os/fs_structs.h	/^	unsigned int addr;						\/*一级块索引*\/$/;"	m	struct:inode
analysis	compiler/imp/LexicalAnalysis_imp.cpp	/^void LexicalAnalysis::analysis()$/;"	f	class:LexicalAnalysis
analysis	compiler/imp/SyntaxAnalysis_Imp.cpp	/^int SyntaxAnalysis::analysis()$/;"	f	class:SyntaxAnalysis
b_addr	os/fs_structs.h	/^	unsigned int b_addr[B_ADDR_NUM]; $/;"	m	union:block
backwardCheckBox	qttest/finddialog.h	/^		QCheckBox *backwardCheckBox;$/;"	m	class:FindDialog
balloc	os/OS4_fs.cpp	/^static int balloc()$/;"	f	file:
bfree	os/OS4_fs.cpp	/^static int bfree(int id)$/;"	f	file:
bits	os/fs_structs.h	/^	unsigned long long bits[BMAP_SIZE];$/;"	m	struct:bmap
bits	os/fs_structs.h	/^	unsigned long long bits[IMAP_SIZE];$/;"	m	struct:imap
block	os/fs_structs.h	/^union block$/;"	u
blocks	os/OS4_fs.cpp	/^static union block blocks[BNODE_SIZE];						\/\/模拟物理块$/;"	v	typeref:union:block	file:
bmap	os/fs_structs.h	/^struct bmap$/;"	s
buffer	compiler/headers/LexicalAnalysis.h	/^    char* buffer;$/;"	m	class:LexicalAnalysis
buffer_size	compiler/headers/LexicalAnalysis.h	/^    int buffer_size;$/;"	m	class:LexicalAnalysis
c_distance	os/OS3_memory.cpp	/^	int c_distance;$/;"	m	struct:Page	file:
caseCheckBox	qttest/finddialog.h	/^		QCheckBox *caseCheckBox;$/;"	m	class:FindDialog
cat	os/OS4_fs.cpp	/^char* cat(FILE_P *fp)$/;"	f
ch	compiler/headers/LexicalAnalysis.h	/^    char ch;$/;"	m	class:LexicalAnalysis
chdir_t	os/OS4_fs.cpp	/^int chdir_t(const char *path)$/;"	f
child1	os/OS2_process.cpp	/^pid_t child1, child2;$/;"	v
child2	os/OS2_process.cpp	/^pid_t child1, child2;$/;"	v
clear_memory	os/OS3_memory.cpp	/^void clear_memory()$/;"	f
closeButton	qttest/finddialog.h	/^		QPushButton *closeButton;$/;"	m	class:FindDialog
close_f	os/OS4_fs.cpp	/^int close_f(FILE_P *fp)$/;"	f
close_file	compiler/imp/FileAction_imp.cpp	/^int FileAction::close_file()$/;"	f	class:FileAction
compute_distance	os/OS3_memory.cpp	/^void compute_distance(int start_pos)$/;"	f
concat	compiler/imp/LexicalAnalysis_imp.cpp	/^void LexicalAnalysis::concat()$/;"	f	class:LexicalAnalysis
const_table	compiler/headers/LexicalAnalysis.h	/^    std::list<std::string> const_table;$/;"	m	class:LexicalAnalysis
count	os/countCFiles.sh	/^count()$/;"	f
cpy_name_update	os/OS4_fs.cpp	/^static int cpy_name_update(int id)$/;"	f	file:
create_f	os/OS4_fs.cpp	/^FILE_P* create_f(const char *name, int right)$/;"	f
create_user	os/OS4_fs.cpp	/^static int create_user(const char *username, const char *passwd)$/;"	f	file:
curr_dir_id	os/OS4_fs.cpp	/^static unsigned int curr_dir_id = 0;						\/\/当前工作目录的id号$/;"	v	file:
curr_path	os/OS4_fs.cpp	/^static char curr_path[500];									\/\/当前工作目录$/;"	v	file:
curr_pos	os/fs_structs.h	/^	unsigned long curr_pos;				\/*文件读取的当前位置。*\/$/;"	m	struct:inode
curr_user	os/OS4_fs.cpp	/^static struct user *curr_user = NULL;							\/\/当前登录用户$/;"	v	typeref:struct:user	file:
curr_usr_id	os/OS4_fs.cpp	/^static int curr_usr_id;										\/\/当前登录用户在用户列表中的位置。$/;"	v	file:
d_id	os/fs_structs.h	/^ 	unsigned int d_id;							\/*目录的id号。即目录数组中的索引号*\/$/;"	m	struct:directory
d_name	os/fs_structs.h	/^ 	char d_name[DIR_NAME_SIZE];         		\/*目录名*\/$/;"	m	struct:directory
delete_f	os/OS4_fs.cpp	/^int delete_f(const char *name)$/;"	f
di_gid	os/fs_structs.h	/^	unsigned short di_gid;    			\/*磁盘i节点组*\/$/;"	m	struct:inode
di_gid	os/fs_structs.h	/^ 	unsigned int di_gid;$/;"	m	struct:dinode
di_number	os/fs_structs.h	/^	unsigned short di_number; 			\/*关联文件数，当为0时，则删除该文件*\/$/;"	m	struct:inode
di_number	os/fs_structs.h	/^ 	unsigned short di_number;        	\/*关联文件数*\/$/;"	m	struct:dinode
di_right	os/fs_structs.h	/^	unsigned int di_right;   			\/*存取权限*\/$/;"	m	struct:inode
di_right	os/fs_structs.h	/^ 	unsigned int di_right;          	\/*存取权限*\/$/;"	m	struct:dinode
di_size	os/fs_structs.h	/^	unsigned long di_size;            	\/*文件大小*\/$/;"	m	struct:dinode
di_size	os/fs_structs.h	/^	unsigned long di_size;            	\/*文件大小*\/$/;"	m	struct:inode
di_uid	os/fs_structs.h	/^	unsigned short di_uid;    			\/*磁盘i节点用户*\/$/;"	m	struct:inode
di_uid	os/fs_structs.h	/^ 	unsigned int di_uid;				\/*所有者的id*\/$/;"	m	struct:dinode
dinode	os/fs_structs.h	/^struct dinode$/;"	s
dinodes	os/OS4_fs.cpp	/^static struct dinode dinodes[INODE_SIZE];					\/\/模拟硬盘i节点$/;"	v	typeref:struct:dinode	file:
dir_info	os/fs_structs.h	/^struct dir_info$/;"	s
dir_or_file	os/fs_structs.h	/^	int dir_or_file;					\/*标记是文件还是目录*\/$/;"	m	struct:dinode
dir_or_file	os/fs_structs.h	/^	int dir_or_file;					\/*标记是文件还是目录*\/$/;"	m	struct:inode
dir_table	os/OS4_fs.cpp	/^static struct directory dir_table[DIR_NUM];					\/\/模拟目录表$/;"	v	typeref:struct:directory	file:
diralloc	os/OS4_fs.cpp	/^static int diralloc()$/;"	f	file:
direct_addr	os/fs_structs.h	/^	unsigned int direct_addr[D_ADDR_NUM];  	$/;"	m	struct:dinode
direct_addr	os/fs_structs.h	/^	unsigned int direct_addr[D_ADDR_NUM];  	$/;"	m	struct:inode
directory	os/fs_structs.h	/^struct directory$/;"	s
dirfree	os/OS4_fs.cpp	/^static int dirfree(int id)$/;"	f	file:
diseffect	os/OS3_memory.cpp	/^int diseffect = 0;$/;"	v
disk_size	os/fs_structs.h	/^ 	long disk_size;						\/*磁盘空间大小。用文件大小模拟。*\/$/;"	m	struct:supernode
dmap	os/fs_structs.h	/^ 	unsigned long long dmap[DMAP_SIZE];	\/\/位图$/;"	m	struct:dir_info
enableFindButton	qttest/finddialog.cpp	/^void FindDialog::enableFindButton(const QString &text)$/;"	f	class:FindDialog
entry	os/fs_structs.h	/^	char entry[BLOCK_SIZE];$/;"	m	union:block
err_quit	apue/ourhdr.c	/^void err_quit(const char *s, ...)$/;"	f
err_sys	apue/ourhdr.c	/^void err_sys(const char *s, ...)$/;"	f
f_count	os/fs_structs.h	/^	unsigned int f_count; 	\/*引用计数*\/$/;"	m	struct:system_ofile
f_flag	os/fs_structs.h	/^	char f_flag; 			\/*文件操作标志*\/$/;"	m	struct:system_ofile
f_inode	os/fs_structs.h	/^	struct inode *f_inode; 	\/*指向内存节点*\/$/;"	m	struct:system_ofile	typeref:struct:system_ofile::inode
f_off	os/fs_structs.h	/^	unsigned long f_off; 	\/*读\/写指针*\/$/;"	m	struct:system_ofile
fa	compiler/headers/LexicalAnalysis.h	/^    FileAction& fa;$/;"	m	class:LexicalAnalysis
file_inode	os/fs_structs.h	/^	unsigned int file_inode[DIR_INCLUDE_NUM];           	\/*对应的inode号*\/$/;"	m	struct:directory
file_name	os/fs_structs.h	/^	char file_name[DIR_INCLUDE_NUM][FILE_NAME_SIZE];        \/*目录中的文件或子目录的名子*\/$/;"	m	struct:directory
fill_buffer	compiler/imp/FileAction_imp.cpp	/^int FileAction::fill_buffer(char* buffer, int size)$/;"	f	class:FileAction
fill_buffer	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::fill_buffer()$/;"	f	class:LexicalAnalysis
find	os/OS4_fs.cpp	/^static int find(const char * path)$/;"	f	file:
findButton	qttest/finddialog.h	/^		QPushButton *findButton;$/;"	m	class:FindDialog
findClicked	qttest/finddialog.cpp	/^void FindDialog::findClicked()$/;"	f	class:FindDialog
findNext	qttest/fd.h	/^void FindDialog::findNext(const QString & _t1, Qt::CaseSensitivity _t2)$/;"	f	class:FindDialog
findPrevious	qttest/fd.h	/^void FindDialog::findPrevious(const QString & _t1, Qt::CaseSensitivity _t2)$/;"	f	class:FindDialog
find_usr	os/OS4_fs.cpp	/^static int find_usr(const char *username, struct user *usr)$/;"	f	file:
format_fs	os/OS4_fs.cpp	/^static int format_fs()$/;"	f	file:
frame_id	os/OS3_memory.cpp	/^	int frame_id;$/;"	m	struct:Page	file:
frompipe	os/OS2_process.cpp	/^char topipe[BUFFERSIZE],frompipe[BUFFERSIZE];$/;"	v
g_bmap	os/OS4_fs.cpp	/^static struct bmap g_bmap;				\/\/物理块位图$/;"	v	typeref:struct:bmap	file:
g_dir_info	os/OS4_fs.cpp	/^static struct dir_info g_dir_info;		\/\/目录信息$/;"	v	typeref:struct:dir_info	file:
g_imap	os/OS4_fs.cpp	/^static struct imap g_imap;				\/\/inode位图$/;"	v	typeref:struct:imap	file:
g_sn	os/OS4_fs.cpp	/^static struct supernode g_sn;			\/\/超级块$/;"	v	typeref:struct:supernode	file:
get_bc	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::get_bc(char &ch)$/;"	f	class:LexicalAnalysis
get_buffer	compiler/imp/LexicalAnalysis_imp.cpp	/^char* LexicalAnalysis::get_buffer()$/;"	f	class:LexicalAnalysis
get_buffer_size	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::get_buffer_size()$/;"	f	class:LexicalAnalysis
get_char	compiler/imp/FileAction_imp.cpp	/^char FileAction::get_char()$/;"	f	class:FileAction
get_char	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::get_char(char &ch)$/;"	f	class:LexicalAnalysis
get_const_table	compiler/imp/LexicalAnalysis_imp.cpp	/^std::list<std::string>& LexicalAnalysis::get_const_table()$/;"	f	class:LexicalAnalysis
get_id	compiler/imp/SyntaxAnalysis_Imp.cpp	/^int SyntaxAnalysis::get_id(const std::string &str)$/;"	f	class:SyntaxAnalysis
get_in_path	compiler/imp/FileAction_imp.cpp	/^const std::string& FileAction::get_in_path()$/;"	f	class:FileAction
get_label_table	compiler/imp/LexicalAnalysis_imp.cpp	/^std::list<std::string>& LexicalAnalysis::get_label_table()$/;"	f	class:LexicalAnalysis
get_next_word	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::get_next_word()$/;"	f	class:LexicalAnalysis
get_ofstrem	compiler/imp/FileAction_imp.cpp	/^std::ofstream& FileAction::get_ofstrem()$/;"	f	class:FileAction
get_out_path	compiler/imp/FileAction_imp.cpp	/^const std::string& FileAction::get_out_path()$/;"	f	class:FileAction
halt	os/OS4_fs.cpp	/^int halt()$/;"	f
has_used	os/OS3_memory.cpp	/^	bool has_used;$/;"	m	struct:Frame	file:
head	os/OS4_fs.cpp	/^static struct inode *head = NULL;		\/\/i内存节点链表头$/;"	v	typeref:struct:inode	file:
hinode	os/fs_structs.h	/^struct hinode$/;"	s
i_back	os/fs_structs.h	/^	struct inode  *i_back;$/;"	m	struct:inode	typeref:struct:inode::inode
i_count	os/fs_structs.h	/^	unsigned int i_count;     			\/*用户引用计数*\/$/;"	m	struct:inode
i_forw	os/fs_structs.h	/^	struct inode  *i_forw;$/;"	m	struct:inode	typeref:struct:inode::inode
i_into	os/fs_structs.h	/^	unsigned int i_into;      			\/*磁盘i节点标号*\/$/;"	m	struct:inode
ialloc	os/OS4_fs.cpp	/^static int ialloc()$/;"	f	file:
iforw	os/fs_structs.h	/^ 	struct inode *iforw;$/;"	m	struct:hinode	typeref:struct:hinode::inode
ifree	os/OS4_fs.cpp	/^static int ifree(int id)$/;"	f	file:
ifs	compiler/headers/FileActions.h	/^    std::ifstream& ifs;\/\/file input stream$/;"	m	class:FileAction
imap	os/fs_structs.h	/^struct imap$/;"	s
in_path	compiler/headers/FileActions.h	/^    std::string in_path;\/\/the path of the source file$/;"	m	class:FileAction
index	compiler/headers/LexicalAnalysis.h	/^    int index;$/;"	m	class:LexicalAnalysis
index	os/fs_structs.h	/^	int index;                                  \/\/目录表中可用的位置。$/;"	m	struct:dir_info
info	compiler/headers/SyntaxAnalysis.h	/^    int info;$/;"	m	class:SyntaxAnalysis
init	os/OS3_memory.cpp	/^void init()$/;"	f
init	os/OS4_fs.cpp	/^int init()$/;"	f
inode	os/fs_structs.h	/^typedef struct inode{$/;"	s
inode_id	os/fs_structs.h	/^ 	unsigned int inode_id;						\/*inode号*\/$/;"	m	struct:directory
inodes	os/OS4_fs.cpp	/^static struct inode inodes[INODE_SIZE];						\/\/内存i节点$/;"	v	typeref:struct:inode	file:
insert_const	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::insert_const()$/;"	f	class:LexicalAnalysis
insert_id	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::insert_id()$/;"	f	class:LexicalAnalysis
interrupt_communicate	os/OS2_process.cpp	/^void interrupt_communicate()$/;"	f
is_digit	compiler/imp/LexicalAnalysis_imp.cpp	/^bool LexicalAnalysis::is_digit(char ch)$/;"	f	class:LexicalAnalysis
is_finalword	compiler/imp/SyntaxAnalysis_Imp.cpp	/^bool SyntaxAnalysis::is_finalword(int id)$/;"	f	class:SyntaxAnalysis
is_free	os/OS3_memory.cpp	/^	bool is_free;$/;"	m	struct:Frame	file:
is_in_memory	os/OS3_memory.cpp	/^	bool is_in_memory;$/;"	m	struct:Page	file:
is_letter	compiler/imp/LexicalAnalysis_imp.cpp	/^bool LexicalAnalysis::is_letter(char ch)$/;"	f	class:LexicalAnalysis
keywords	compiler/headers/LexicalAnalysis.h	/^    std::vector<std::string> keywords;$/;"	m	class:LexicalAnalysis
kill_children	os/OS2_process.cpp	/^void kill_children(int sig)$/;"	f
la	compiler/headers/SyntaxAnalysis.h	/^    LexicalAnalysis& la;$/;"	m	class:SyntaxAnalysis
label	qttest/finddialog.h	/^		QLabel *label;$/;"	m	class:FindDialog
label_table	compiler/headers/LexicalAnalysis.h	/^    std::list<std::string> label_table;$/;"	m	class:LexicalAnalysis
len	compiler/headers/LexicalAnalysis.h	/^    int len;$/;"	m	class:LexicalAnalysis
lineEdit	qttest/finddialog.h	/^		QLineEdit *lineEdit;$/;"	m	class:FindDialog
login	os/OS4_fs.cpp	/^int login(const char *username, const char *passwd)$/;"	f
login_users	os/OS4_fs.cpp	/^static struct user login_users[MAX_LOGIN_USR];				\/\/登录的用户列表$/;"	v	typeref:struct:user	file:
logout	os/OS4_fs.cpp	/^int logout(const char *user_name)$/;"	f
ls_t	os/OS4_fs.cpp	/^char * ls_t(const char *path)$/;"	f
main	apue/main.c	/^int main(int argc, char *argv[])$/;"	f
main	compiler/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	os/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	qttest/main.cpp	/^int main(int argc, char **argv) $/;"	f
main_t	os/OS3_memory.cpp	/^int main_t[total_instruction];$/;"	v
max	apue/ourhdr.h	17;"	d
message_communicate	os/OS2_process.cpp	/^void message_communicate()$/;"	f
metaObject	qttest/fd.h	/^const QMetaObject *FindDialog::metaObject() const$/;"	f	class:FindDialog
min	apue/ourhdr.h	16;"	d
mkdir_t	os/OS4_fs.cpp	/^int mkdir_t(const char *name)$/;"	f
mode	os/fs_structs.h	/^	unsigned int mode;					\/*打开方式*\/$/;"	m	struct:inode
no_use_time	os/OS3_memory.cpp	/^	int no_use_time;$/;"	m	struct:Frame	file:
ofs	compiler/headers/FileActions.h	/^    std::ofstream& ofs;\/\/file output stream$/;"	m	class:FileAction
open_f	os/OS4_fs.cpp	/^FILE_P* open_f(const char *name, int mode)$/;"	f
open_file	compiler/imp/FileAction_imp.cpp	/^int FileAction::open_file()$/;"	f	class:FileAction
out_path	compiler/headers/FileActions.h	/^    std::string out_path;\/\/the path of the output file$/;"	m	class:FileAction
output	compiler/imp/LexicalAnalysis_imp.cpp	/^void LexicalAnalysis::output(int id, const char* entry)$/;"	f	class:LexicalAnalysis
p_gid	os/fs_structs.h	/^	unsigned short p_gid;$/;"	m	struct:user
p_uid	os/fs_structs.h	/^ 	unsigned short p_uid;$/;"	m	struct:user
page_id	os/OS3_memory.cpp	/^	int page_id;$/;"	m	struct:Frame	file:
pagecontrol	os/OS3_memory.cpp	/^struct Frame pagecontrol[AP];$/;"	v	typeref:struct:Frame
pages	os/OS3_memory.cpp	/^struct Page pages[PP];$/;"	v	typeref:struct:Page
parent_id	os/fs_structs.h	/^	unsigned int parent_id;             \/*父目录的目录号。*\/$/;"	m	struct:dinode
parent_id	os/fs_structs.h	/^	unsigned int parent_id;             \/*父目录的目录号。*\/$/;"	m	struct:inode
parent_id	os/fs_structs.h	/^ 	unsigned int parent_id;						\/*父目录的id。*\/$/;"	m	struct:directory
passwd	os/fs_structs.h	/^	char passwd[PWD_SIZE];$/;"	m	struct:user
print_buffer	compiler/imp/LexicalAnalysis_imp.cpp	/^void LexicalAnalysis::print_buffer()$/;"	f	class:LexicalAnalysis
print_error_position	compiler/imp/SyntaxAnalysis_Imp.cpp	/^void SyntaxAnalysis::print_error_position()$/;"	f	class:SyntaxAnalysis
print_info	compiler/imp/SyntaxAnalysis_Imp.cpp	/^void SyntaxAnalysis::print_info()$/;"	f	class:SyntaxAnalysis
print_stack	compiler/imp/SyntaxAnalysis_Imp.cpp	/^void SyntaxAnalysis::print_stack()$/;"	f	class:SyntaxAnalysis
push_all	compiler/imp/SyntaxAnalysis_Imp.cpp	/^void SyntaxAnalysis::push_all(const std::string& str, bool flag)$/;"	f	class:SyntaxAnalysis
pwd	os/OS4_fs.cpp	/^char* pwd()$/;"	f
qt_meta_data_FindDialog	qttest/fd.h	/^static const uint qt_meta_data_FindDialog[] = {$/;"	v
qt_meta_stringdata_FindDialog	qttest/fd.h	/^static const char qt_meta_stringdata_FindDialog[] = {$/;"	v
qt_metacall	qttest/fd.h	/^int FindDialog::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:FindDialog
qt_metacast	qttest/fd.h	/^void *FindDialog::qt_metacast(const char *_clname)$/;"	f	class:FindDialog
read_f	os/OS4_fs.cpp	/^int read_f(FILE_P *fp, char *buffer, int length)$/;"	f
read_fs	os/OS4_fs.cpp	/^static int read_fs()$/;"	f	file:
read_indirect_block	os/OS4_fs.cpp	/^static int read_indirect_block(union block *addr_block, int len, char* buffer)$/;"	f	file:
reserve	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::reserve()$/;"	f	class:LexicalAnalysis
retract	compiler/imp/LexicalAnalysis_imp.cpp	/^void LexicalAnalysis::retract()$/;"	f	class:LexicalAnalysis
rmdir_t	os/OS4_fs.cpp	/^int rmdir_t(const char *name)$/;"	f
root_id	os/fs_structs.h	/^ 	unsigned int root_id;						\/\/根目录的id。通常是0.$/;"	m	struct:dir_info
run	os/OS2_process.cpp	/^void run(bool show_details)$/;"	f
run	os/OS3_memory.cpp	/^void run(bool show_details)$/;"	f
run	os/OS4_fs.cpp	/^void run(bool show_details)$/;"	f
s	compiler/headers/SyntaxAnalysis.h	/^    std::stack<char> s;$/;"	m	class:SyntaxAnalysis
s_bsize	os/fs_structs.h	/^ 	unsigned long s_bsize;             	\/*数据块块数*\/$/;"	m	struct:supernode
s_fmod	os/fs_structs.h	/^ 	char s_fmod;                    	\/*超级块修改标志*\/$/;"	m	struct:supernode
s_free	os/fs_structs.h	/^ 	unsigned int s_free[NICFREE];     	\/*空闲块堆栈*\/$/;"	m	struct:supernode
s_inode	os/fs_structs.h	/^ 	unsigned int s_inode[NICINOD];   	\/*空闲i节点数组*\/$/;"	m	struct:supernode
s_isize	os/fs_structs.h	/^ 	unsigned int s_isize;            	\/*i节点块块数*\/$/;"	m	struct:supernode
s_nfree	os/fs_structs.h	/^ 	unsigned int s_nfree;             	\/*空闲块块数*\/$/;"	m	struct:supernode
s_ninode	os/fs_structs.h	/^ 	unsigned int s_ninode;            	\/*空闲i节点数*\/$/;"	m	struct:supernode
s_pfree	os/fs_structs.h	/^ 	unsigned short s_pfree;           	\/*空闲块指针*\/$/;"	m	struct:supernode
s_pinode	os/fs_structs.h	/^ 	unsigned short s_pinode;          	\/*空闲i节点指针*\/$/;"	m	struct:supernode
s_rinode	os/fs_structs.h	/^	unsigned int s_rinode;           	\/*铭记i节点*\/$/;"	m	struct:supernode
sen_addr	os/fs_structs.h	/^	unsigned int sen_addr;					\/*二级块索引*\/$/;"	m	struct:dinode
sen_addr	os/fs_structs.h	/^	unsigned int sen_addr;					\/*二级块索引*\/$/;"	m	struct:inode
set_buffer_size	compiler/imp/LexicalAnalysis_imp.cpp	/^int LexicalAnalysis::set_buffer_size(int size)$/;"	f	class:LexicalAnalysis
set_in_path	compiler/imp/FileAction_imp.cpp	/^void FileAction::set_in_path(const std::string& path)$/;"	f	class:FileAction
set_out_path	compiler/imp/FileAction_imp.cpp	/^void FileAction::set_out_path(const std::string& path)$/;"	f	class:FileAction
show_help_info	os/OS4_fs.cpp	/^void show_help_info()$/;"	f
show_msg1	os/OS2_process.cpp	/^void show_msg1(int sig)$/;"	f
show_msg2	os/OS2_process.cpp	/^void show_msg2(int sig)$/;"	f
show_names	os/OS4_fs.cpp	/^static int show_names(int id,int black)$/;"	f	file:
size	os/fs_structs.h	/^ 	unsigned int size;                  		\/\/目录的个数$/;"	m	struct:dir_info
staticMetaObject	qttest/fd.h	/^const QMetaObject FindDialog::staticMetaObject = {$/;"	m	class:FindDialog
status	os/OS2_process.cpp	/^int status;$/;"	v
str_cpy	os/OS4_fs.cpp	/^static void str_cpy(char * des, const char * src, int begin, int size)$/;"	f	file:
str_token	compiler/headers/LexicalAnalysis.h	/^    std::string str_token;$/;"	m	class:LexicalAnalysis
string_id	compiler/headers/SyntaxAnalysis.h	/^    std::string string_id[SIZE];$/;"	m	class:SyntaxAnalysis
sub_cnt	os/fs_structs.h	/^ 	unsigned int sub_cnt;									\/*子目录和文件的数目*\/$/;"	m	struct:directory
sub_dir_ids	os/fs_structs.h	/^	unsigned int sub_dir_ids[DIR_INCLUDE_NUM];				\/*若对应项是目录，存放其id。*\/$/;"	m	struct:directory
supernode	os/fs_structs.h	/^struct supernode$/;"	s
system_ofile	os/fs_structs.h	/^struct system_ofile$/;"	s
system_ofile_table	os/OS4_fs.cpp	/^static struct system_ofile system_ofile_table;				\/\/系统打开的文件列表$/;"	v	typeref:struct:system_ofile	file:
t_fp	os/OS4_fs.cpp	/^static FILE_P *t_fp = NULL;\/\/调试使用$/;"	v	file:
table1	compiler/headers/SyntaxAnalysis.h	/^    std::string table1[16];$/;"	m	class:SyntaxAnalysis
table2	compiler/headers/SyntaxAnalysis.h	/^    int table2[SIZE][SIZE];$/;"	m	class:SyntaxAnalysis
tip	os/OS4_fs.cpp	/^static char tip[50];										\/\/命令提示$/;"	v	file:
topipe	os/OS2_process.cpp	/^char topipe[BUFFERSIZE],frompipe[BUFFERSIZE];$/;"	v
total_instruction	os/OS3_memory.cpp	/^const int total_instruction = 20;$/;"	v
tru_addr	os/fs_structs.h	/^	unsigned int tru_addr;					\/*三级块索引*\/$/;"	m	struct:dinode
tru_addr	os/fs_structs.h	/^	unsigned int tru_addr;					\/*三级块索引*\/$/;"	m	struct:inode
u_default_mode	os/fs_structs.h	/^	unsigned short u_default_mode;$/;"	m	struct:user_ofile
u_gid	os/fs_structs.h	/^	unsigned short u_gid; 			\/*用户组标志*\/$/;"	m	struct:user_ofile
u_ofile	os/fs_structs.h	/^	unsigned short u_ofile[USR_OFILE_NUM]; \/*用户打开表*\/$/;"	m	struct:user_ofile
u_uid	os/fs_structs.h	/^	unsigned short u_uid; 			\/*用户标志*\/$/;"	m	struct:user_ofile
update_curr_path_name	os/OS4_fs.cpp	/^static int update_curr_path_name()$/;"	f	file:
user	os/fs_structs.h	/^struct user$/;"	s
user_ofile	os/fs_structs.h	/^struct user_ofile$/;"	s
user_ofile_table	os/OS4_fs.cpp	/^static struct user_ofile user_ofile_table[MAX_LOGIN_USR]; 	\/\/用户打开文件列表$/;"	v	typeref:struct:user_ofile	file:
username	os/fs_structs.h	/^	char username[USR_NAME_SIZE];$/;"	m	struct:user
usr_num	os/OS4_fs.cpp	/^static int usr_num = 0;										\/\/登陆的用户个数$/;"	v	file:
write_block	os/OS4_fs.cpp	/^static int write_block(int b_id, char *buffer, int size)$/;"	f	file:
write_f	os/OS4_fs.cpp	/^int write_f(FILE_P *fp, char *buffer, int length)$/;"	f
~FileAction	compiler/imp/FileAction_imp.cpp	/^FileAction::~FileAction()$/;"	f	class:FileAction
~LexicalAnalysis	compiler/imp/LexicalAnalysis_imp.cpp	/^LexicalAnalysis::~LexicalAnalysis()$/;"	f	class:LexicalAnalysis
~SyntaxAnalysis	compiler/imp/SyntaxAnalysis_Imp.cpp	/^SyntaxAnalysis::~SyntaxAnalysis()$/;"	f	class:SyntaxAnalysis
